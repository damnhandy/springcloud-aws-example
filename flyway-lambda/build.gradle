plugins {
    id 'java'
    id 'maven-publish'
    id 'org.graalvm.buildtools.native' version '0.9.23'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'com.example.dbmigrator'
version = '1.0.0'


compileJava   {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


repositories {
    mavenCentral()
}

configurations {
    implementation.exclude group: 'software.amazon.awssdk', module: 'netty-nio-client'
    implementation.exclude group: 'software.amazon.awssdk', module: 'apache-client'
}

shadowJar {
    archiveFileName = "flyway-lambda.jar"
    transform(com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer)
}

ext {
    powertoolsVersion = "1.15.0"
}

dependencies {
    implementation platform('software.amazon.awssdk:bom:2.20.91')
    implementation("org.flywaydb:flyway-core:9.20.0")
    implementation('org.postgresql:postgresql:42.6.0')
    implementation('software.amazon.awssdk:s3')
    implementation('software.amazon.awssdk:secretsmanager')
    implementation('software.amazon.awssdk:url-connection-client')
    implementation("software.amazon.lambda:powertools-cloudformation:${powertoolsVersion}")
    implementation("software.amazon.lambda:powertools-parameters:${powertoolsVersion}")
    implementation("software.amazon.lambda:powertools-logging:${powertoolsVersion}")
    implementation("software.amazon.lambda:powertools-metrics:${powertoolsVersion}")
    implementation("software.amazon.lambda:powertools-tracing:${powertoolsVersion}")
    implementation("software.amazon.lambda:powertools-serialization:${powertoolsVersion}")

    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.9.3')
    testImplementation('com.amazonaws:aws-lambda-java-tests:1.1.1')
    testImplementation('org.mockito:mockito-junit-jupiter:5.4.0')
    testImplementation("me.madhead.aws-junit5:s3-v2:7.1.2")
    testImplementation("me.madhead.aws-junit5:lambda-v2:7.1.2")
    testImplementation('org.zapodot:embedded-db-junit-jupiter:2.1.0')
    testRuntimeOnly ('org.junit.jupiter:junit-jupiter-engine')
}


task buildZip(type: Zip) {
    archiveFileName = "${project.name}.zip"
    into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
    }
}

build.dependsOn buildZip

test {
    useJUnitPlatform()
    // The AWS v1 SDK will fail if the region is not set, so we configure it via system property. The unit tests
    // do not call any AWS resources, this is simply a means to ensure that the tests don't fail on resolving the
    // region in the AwsRegionProviderChain.java.
    systemProperty("aws.region","us-east-1")
    testLogging {
        events "failed"
        debug {
            events "started", "skipped", "failed"
            exceptionFormat "full"
        }
        info.events = ["failed", "skipped"]
    }
}

build.dependsOn buildZip
build.dependsOn shadowJar